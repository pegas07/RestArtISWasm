@page "/order"
@inject HttpClient client
@inject IJSRuntime js
@inject NavigationManager uriHelper

<MudText Typo="Typo.h3">Objednávky</MudText>

<div class="form-group">
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="NewOrder">Nová</MudButton>
</div>
<br>

@if (orders == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else if (orders.Length == 0)
{
    <MudText>Nenalezeny žádné záznamy</MudText>
}
else
{
    <MudTable Items="@orders" Hover="true">
        <HeaderContent>
            @*<MudTh>Název</MudTh>
            <MudTh>Sazba DPH</MudTh>*@
            <MudTh />
        </HeaderContent>
        <RowTemplate>
            @*<MudTd>@context.Name</MudTd>
            <MudTd>@context.ActualRate</MudTd>*@
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => Edit(context.Id))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => Delete(context.Id))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
}
@code {
    Order[] orders { get; set; }
    protected override async Task OnInitializedAsync()
    {
        orders = await client.GetFromJsonAsync<Order[]>("api/order");
    }
    async Task Delete(int orderId)
    {
        var order = orders.First(x => x.Id == orderId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {order.Note}'s ({order.Id}) Record?"))
        {
            await client.DeleteAsync($"api/order/{orderId}");
            await OnInitializedAsync();
        }
    }
    void Edit(int orderId)
    {
        uriHelper.NavigateTo($"order/edit/{orderId}");
    }

    void NewOrder()
    {
        uriHelper.NavigateTo($"order/create");
    }
}