@inject HttpClient client

<EditForm Model="@order" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <MudCard Class="ma-2 pa-1">
        <MudAutocomplete T="BusinessPartner" @bind-Value="order.BusinessPartner" SearchFunc="@SearchBusinessPartners" 
            ToStringFunc="@(bp => (bp == null ? null : $"{bp.Code} - {bp.Name}"))" ResetValueOnEmptyText="true" Label="Odběratel" >
            <ItemTemplate Context="e">
                <MudText>@(e == null ? null : $"{e.Code} - {e.Name}")</MudText>
            </ItemTemplate>
        </MudAutocomplete>
        <MudSelect Label="Trasa rozvozu" @bind-Value="@order.DeliveryRoute" T="DeliveryRoute" Text="@order?.DeliveryRoute?.Name" OffsetY="true"
                   Required="true" RequiredError="Trasa rozvozu je povinná položka" ToStringFunc="@converter" For="@(() => order.DeliveryRoute)">
            @foreach (DeliveryRoute dr in deliveryRoutes)
            {
                <MudSelectItem T="DeliveryRoute" Value="@dr">@dr.Name</MudSelectItem>
            }
        </MudSelect>
        <MudTextField Label="Poznámka" @bind-Value="@order.Note" For="@(() => order.Note)" Lines="4" />
        <MudText>@($"Vytvořeno {order.DateCreated}")</MudText>


        <MudList>
            <MudListSubheader>Polozky odbjednavky</MudListSubheader>
            @if (order != null && order.OrderItems != null)
            {
                foreach (var item in order.OrderItems)
                {
                    <MudListItem> 
                        @if (true) //TODO: podminka jestli uzivatel muze editovat
                        {
                            <MudAutocomplete T="MenuItem"></MudAutocomplete>
                        }
                        else
                        {
                            <MudGrid>
                                <MudItem xs="2" md="1">
                                    <MudTextField Class="d-inline-flex" Placeholder="Množství" @bind-Value="MenuItem.Amount" For="() => MenuItem.Amount" />
                                </MudItem> 
                                <MudItem xs="7" md="9">
                                    <MudTextField Class="d-inline-flex" Placeholder="Název" @bind-Value="MenuItem.Name" For="() => MenuItem.Name" />
                                </MudItem> 
                                <MudItem xs="2" md="1">
                                    <MudTextField Class="d-inline-flex" Placeholder="Cena" @bind-Value="MenuItem.Price" For="() => MenuItem.Price" Adornment="Adornment.End" AdornmentText="Kč" />
                                </MudItem> 
                                <MudItem xs="1" md="1">
                                    <MudIconButton Icon="@Icons.Material.Close" Size="Size.Small" Color="Color.Error" OnClick="@(() => MenuItemDeleted.InvokeAsync(MenuItem))" />
                                </MudItem>
                            </MudGrid>
                        }

                    </MudListItem>
                }
            }
        </MudList>

        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit">@ButtonText</MudButton>
            <MudButton OnClick="@(() => OnValidCancel.InvokeAsync())">Storno</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    [Parameter] public Order order { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Uložit";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnValidCancel { get; set; }
    [Parameter] public List<DeliveryRoute> deliveryRoutes { get; set; } = new List<DeliveryRoute>();

    protected override async Task OnInitializedAsync()
    {
        var dr = await client.GetFromJsonAsync<DeliveryRoute[]>("api/deliveryroute");
        deliveryRoutes = dr.ToList();
    }

    private async Task<IEnumerable<BusinessPartner>> SearchBusinessPartners(string search)
    {
        if (!string.IsNullOrWhiteSpace(search))
            return await client.GetFromJsonAsync<IEnumerable<BusinessPartner>>($"api/businesspartner/Search/{search}");
        else
            return await client.GetFromJsonAsync<IEnumerable<BusinessPartner>>($"api/businesspartner");

    }

    Func<DeliveryRoute, string> converter = m => m.Name;
}