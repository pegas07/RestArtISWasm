@inject HttpClient client

<EditForm Model="@menu" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div>
        <MudTextField Label="Název" @bind-Value="menu.Name" />      
        <MudSelect Label="Kategorie menu" @bind-Value="menu.MenuCategory" T="MenuCategory" Text="@menu?.MenuCategory?.Name" OffsetY="true"
                   Required="true" RequiredError="Kategorie menu je povinná položka" ToStringFunc="@converter" ReadOnly="menu.MenuCategory_IsReadOnly">
            @foreach (MenuCategory mc in menuCategories)
            {
                <MudSelectItem T="MenuCategory" Value="mc">@mc.Name</MudSelectItem>
            }
        </MudSelect>
        @if (menu.MenuCategory != null)
        {
            if (menu.MenuCategory?.MenuTypeId == (int)MenuTypes.Permanent)
            {
                <MenuItemCategoryView MenuItemCategories="menu.MenuCategory.MenuItemCategories" MenuItems="menu.MenuItems" AddMenuItem="AddMenuItem" MenuItemDeleted="DeleteMenuItem" />                                            
            }
            else if (menu.MenuCategory?.MenuTypeId == (int)MenuTypes.Day)
            {
                <MenuItemCategoryView MenuItemCategories="menu.MenuCategory.MenuItemCategories" MenuItems="menu.MenuItems" Date="menu.DateFrom" AddMenuItem="AddMenuItem" MenuItemDeleted="DeleteMenuItem" /> 
            }
            else if (menu.MenuCategory?.MenuTypeId == (int)MenuTypes.Week)
            {
                if (menu.DateFrom != null && menu.DateTo != null)
                {
                    <MudText>@menu.DateFrom</MudText>
                    <MudText>@menu.DateTo</MudText>
                    for (var day = menu.DateFrom.Value; day <= menu.DateTo.Value; day = day.AddDays(1))
                    {                        
                        <MudText>@day.DayOfWeek</MudText>
                        <MenuItemCategoryView MenuItemCategories="menu.MenuCategory.MenuItemCategories" MenuItems="menu.MenuItems" Date="day" AddMenuItem="AddMenuItem" MenuItemDeleted="DeleteMenuItem" /> 
                    }
                }
            }
        }
    </div>
    <MudButton ButtonType="ButtonType.Submit">@ButtonText</MudButton>
    <MudButton OnClick="Cancel">Storno</MudButton>
</EditForm>
@code {
    [Parameter] public Menu menu { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Uložit";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnValidCancel { get; set; }
    [Parameter] public List<MenuCategory> menuCategories { get; set; } = new List<MenuCategory>();

    Func<MenuCategory, string> converter = m => m.Name;
    protected override async Task OnInitializedAsync()
    {
        var mc = await client.GetFromJsonAsync<MenuCategory[]>("api/menucategory");
        menuCategories = mc.ToList();
    }
    void Cancel()
    {
        OnValidCancel.InvokeAsync();
        //navigation.NavigateTo("/menucategory");
    }

    void AddMenuItem((MenuItemCategory, DateTime?) par)
    {
        if (menu.MenuItems == null)
            menu.MenuItems = new List<MenuItem>();
        menu.MenuItems.Add(new MenuItem { Menu = menu, MenuItemCategory = par.Item1, Date = par.Item2 });
    }

    void DeleteMenuItem(MenuItem menuItem)
    {
        menu.MenuItems?.Remove(menuItem);
    }
}
