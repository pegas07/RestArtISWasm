@page "/vat"
@inject HttpClient client
@inject IJSRuntime js
@inject NavigationManager uriHelper

<MudText Typo="Typo.h3">DPH</MudText>

<div class="form-group">
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Add" OnClick="NewVat">Nová</MudButton>
</div>
<br>

@if (vats == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else if (vats.Length == 0)
{
    <MudText>Nenalezeny žádné záznamy</MudText>
}
else
{
    <MudTable Items="@vats" Hover="true">
        <HeaderContent>
            <MudTh>Název</MudTh>
            <MudTh>Sazba DPH</MudTh>
            <MudTh />
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>  
            <MudTd>@($"{context.ActualRate} % ")</MudTd>          
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Edit" OnClick="@(() => Edit(context.Id))" />
                <MudIconButton Icon="@Icons.Material.Delete" OnClick="@(() => Delete(context.Id))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
}
@code {
    Vat[] vats { get; set; }
    protected override async Task OnInitializedAsync()
    {
        vats = await client.GetFromJsonAsync<Vat[]>("api/vat");
    }
    async Task Delete(int vatId)
    {
        var vat = vats.First(x => x.Id == vatId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {vat.Name}'s ({vat.Id}) Record?"))
        {
            await client.DeleteAsync($"api/vat/{vatId}");
            await OnInitializedAsync();
        }
    }
    void Edit(int vatId)
    {
        uriHelper.NavigateTo($"vat/edit/{vatId}");
    }

    void NewVat()
    {
        uriHelper.NavigateTo($"vat/create");
    }
}